<?xml version='1.0' encoding='UTF-8'?>
<document>
			<nodes><node type="preview" title="Preview" id="5">
						<pos x="813" y="59"></pos>
						<size width="459" height="422"></size><image offsety="-84.591194" offsetx="-14.589575" zoom="0.67275035"></image><view selected="iso"></view><zslider value="50"></zslider>
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="d:Float"></intype><intype type="m:Material"></intype>
						</intypes>
		
						<functions>
							
						</functions>
					</node><node type="predefined" title="Min" id="3">
						<pos x="758" y="281"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="min_t1309615349" outname=" " outtype="Float">xs.min</function>
						</functions>
					</node><node type="predefined" title="Source" id="1">
						<pos x="-141" y="81"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="sourcev_t1309615349" outname=" " outtype="Vec3">source</function><function name="sourcex_t1309615349" outname=" " outtype="Float">source.x</function><function name="sourcey_t1309615349" outname=" " outtype="Float">source.y</function><function name="sourcez_t1309615349" outname=" " outtype="Float">source.z</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="4">
						<pos x="21" y="314"></pos>
						
						<sliders>
							<slider name="size" value="93"></slider><slider name="outscale" value="87"></slider><slider name="outoffset" value="57"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="plus:Seq[Float]=Nil"></intype><intype type="minus:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_t1309615349" outname=" " outtype="Float">
		val invexpsize = pow(256,((0.5f-size)*2f))
		val expoutscale = pow(256,((outscale-0.5f)*2f))
		val linearoutoffset = (outoffset-0.5f)*2f
		val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
		(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + plus.sum - minus.sum
		</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="2">
						<pos x="375" y="248"></pos>
						
						<sliders>
							<slider name="size" value="71"></slider><slider name="outscale" value="52"></slider><slider name="outoffset" value="65"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="plus:Seq[Float]=Nil"></intype><intype type="minus:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_t1309615349" outname=" " outtype="Float">
		val invexpsize = pow(256,((0.5f-size)*2f))
		val expoutscale = pow(256,((outscale-0.5f)*2f))
		val linearoutoffset = (outoffset-0.5f)*2f
		val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
		(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + plus.sum - minus.sum
		</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="6">
						<pos x="138" y="52"></pos>
						
						<sliders>
							<slider name="size" value="85"></slider><slider name="outscale" value="79"></slider><slider name="outoffset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="plus:Seq[Float]=Nil"></intype><intype type="minus:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_t1309615349" outname=" " outtype="Float">
		val invexpsize = pow(256,((0.5f-size)*2f))
		val expoutscale = pow(256,((outscale-0.5f)*2f))
		val linearoutoffset = (outoffset-0.5f)*2f
		val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
		(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + plus.sum - minus.sum
		</function>
						</functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="3" connector="0"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="4"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="2"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="0"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="2"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="3" connector="0"></in>
						<out nodeid="2" connector="0"></out>
					</connection></connections>
		</document>