<?xml version='1.0' encoding='UTF-8'?>
<document>
			<nodes><node type="predefined" title="Feature Source" id="10">
						<pos x="158" y="119"></pos>
						
						<sliders>
							<slider name="scale" value="52"></slider><slider name="x" value="50"></slider><slider name="y" value="50"></slider><slider name="z" value="50"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="fsrcv_1308740943_1308761930" outname="v" outtype="Vec3">(source + (Vec3(x,y,z)-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcx_1308740943_1308761930" outname="x" outtype="Float">(source.x + (x-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcy_1308740943_1308761930" outname="y" outtype="Float">(source.y + (y-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcz_1308740943_1308761930" outname="z" outtype="Float">(source.z + (z-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="17">
						<pos x="361" y="417"></pos>
						
						<sliders>
							<slider name="size" value="71"></slider><slider name="scale" value="45"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308740943_1308761930" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="preview" title="Preview" id="1">
						<pos x="1223" y="9"></pos>
						<size width="282" height="318"></size><image offsety="-51.124283" offsetx="-79.162056" zoom="0.50544727"></image><depth checked="false"></depth><zslider value="50"></zslider>
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="d:Float"></intype><intype type="m:Material"></intype>
						</intypes>
		
						<functions>
							
						</functions>
					</node><node type="predefined" title="Feature Noise" id="15">
						<pos x="612" y="80"></pos>
						
						<sliders>
							<slider name="size" value="71"></slider><slider name="scale" value="63"></slider><slider name="offset" value="38"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308740943_1308761930" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="preview" title="Preview" id="6">
						<pos x="1147" y="361"></pos>
						<size width="483" height="467"></size><image offsety="-41.75426" offsetx="-544.9383" zoom="0.25937432"></image><depth checked="false"></depth><zslider value="50"></zslider>
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="d:Float"></intype><intype type="m:Material"></intype>
						</intypes>
		
						<functions>
							
						</functions>
					</node><node type="predefined" title="Max" id="14">
						<pos x="984" y="225"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="max_1308740943_1308761930" outname=" " outtype="Float">xs.max</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="12">
						<pos x="248" y="817"></pos>
						
						<sliders>
							<slider name="size" value="71"></slider><slider name="scale" value="45"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308740943_1308761930" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Product" id="9">
						<pos x="99" y="755"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308740943_1308761930" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Material Threshold" id="3">
						<pos x="878" y="379"></pos>
						
						<sliders>
							<slider name="threshold" value="40"></slider>
						</sliders>
		
						<intypes>
							<intype type="x:Material=Material(0xFFFFFF)"></intype><intype type="t:Float"></intype><intype type="y:Material=Material(0)"></intype>
						</intypes>
		
						<functions>
							<function name="matthreshold_1308740943_1308761930" outname=" " outtype="Material">if(t &gt; (threshold-0.5f)*2f) x else y</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="4">
						<pos x="444" y="664"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="59"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308740943_1308761930" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Feature Source" id="13">
						<pos x="157" y="447"></pos>
						
						<sliders>
							<slider name="scale" value="50"></slider><slider name="x" value="50"></slider><slider name="y" value="50"></slider><slider name="z" value="50"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="fsrcv_1308740943_1308761930" outname="v" outtype="Vec3">(source + (Vec3(x,y,z)-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcx_1308740943_1308761930" outname="x" outtype="Float">(source.x + (x-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcy_1308740943_1308761930" outname="y" outtype="Float">(source.y + (y-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcz_1308740943_1308761930" outname="z" outtype="Float">(source.z + (z-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function>
						</functions>
					</node><node type="predefined" title="Material RGB" id="16">
						<pos x="549" y="557"></pos>
						
						<sliders>
							<slider name="r" value="86"></slider><slider name="g" value="69"></slider><slider name="b" value="0"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="matrgb_1308740943_1308761930" outname=" " outtype="Material">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt)</function>
						</functions>
					</node><node type="predefined" title="Material RGB" id="5">
						<pos x="588" y="415"></pos>
						
						<sliders>
							<slider name="r" value="64"></slider><slider name="g" value="41"></slider><slider name="b" value="15"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="matrgb_1308740943_1308761930" outname=" " outtype="Material">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt)</function>
						</functions>
					</node><node type="predefined" title="Feature Source" id="2">
						<pos x="140" y="626"></pos>
						
						<sliders>
							<slider name="scale" value="50"></slider><slider name="x" value="50"></slider><slider name="y" value="50"></slider><slider name="z" value="50"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="fsrcv_1308740943_1308761930" outname="v" outtype="Vec3">(source + (Vec3(x,y,z)-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcx_1308740943_1308761930" outname="x" outtype="Float">(source.x + (x-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcy_1308740943_1308761930" outname="y" outtype="Float">(source.y + (y-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcz_1308740943_1308761930" outname="z" outtype="Float">(source.z + (z-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function>
						</functions>
					</node><node type="predefined" title="Material Threshold" id="7">
						<pos x="723" y="566"></pos>
						
						<sliders>
							<slider name="threshold" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="x:Material=Material(0xFFFFFF)"></intype><intype type="t:Float"></intype><intype type="y:Material=Material(0)"></intype>
						</intypes>
		
						<functions>
							<function name="matthreshold_1308740943_1308761930" outname=" " outtype="Material">if(t &gt; (threshold-0.5f)*2f) x else y</function>
						</functions>
					</node><node type="predefined" title="Material RGB" id="11">
						<pos x="642" y="287"></pos>
						
						<sliders>
							<slider name="r" value="50"></slider><slider name="g" value="50"></slider><slider name="b" value="50"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="matrgb_1308740943_1308761930" outname=" " outtype="Material">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt)</function>
						</functions>
					</node><node type="preview" title="Preview" id="8">
						<pos x="697" y="702"></pos>
						<size width="282" height="318"></size><image offsety="-150.64403" offsetx="-82.90666" zoom="0.19487172"></image><depth checked="false"></depth><zslider value="36"></zslider>
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="d:Float"></intype><intype type="m:Material"></intype>
						</intypes>
		
						<functions>
							
						</functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="3" connector="2"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="14" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="0"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="0"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="15" connector="4"></in>
						<out nodeid="10" connector="2"></out>
					</connection><connection>
						<in nodeid="14" connector="0"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="14" connector="0"></in>
						<out nodeid="17" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="2"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="1" connector="0"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="15" connector="0"></in>
						<out nodeid="10" connector="0"></out>
					</connection><connection>
						<in nodeid="8" connector="0"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="2"></in>
						<out nodeid="16" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="1"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="0"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="17" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="17" connector="4"></in>
						<out nodeid="13" connector="2"></out>
					</connection><connection>
						<in nodeid="7" connector="1"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="2"></in>
						<out nodeid="2" connector="2"></out>
					</connection><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="15" connector="0"></out>
					</connection></connections>
		</document>