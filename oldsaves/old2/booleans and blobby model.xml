<?xml version='1.0' encoding='UTF-8'?>
<document>
			<module name="GameEngine"></module>
			<nodes><node type="preview" title="Preview" id="1">
						<location x="1227" y="366"></location>
						<size width="379" height="297"></size><image offsety="-8.350000000000003" offsetx="-17.300000000000004" zoom="0.1"></image><view mode="valueswithiso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result_uid4e52429c" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="preview" title="Preview" id="5">
						<location x="1228" y="40"></location>
						<size width="383" height="298"></size><image offsety="-8.400000000000004" offsetx="-17.500000000000004" zoom="0.1"></image><view mode="valueswithiso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result_uid4e52429c" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="predefined" title="Distance of 2nd Sphere" id="2">
						<location x="481" y="418"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(257, s1)-1 else 1-pow(257, -s1)" value="67"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp_uid4e52429c" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp_uid4e52429c" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp_uid4e52429c" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="preview" title="Preview" id="12">
						<location x="1228" y="694"></location>
						<size width="375" height="295"></size><image offsety="-8.3" offsetx="-17.1" zoom="0.1"></image><view mode="valueswithiso" perspective="sideview_yup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result_uid4e52429c" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="predefined" title="Vec3" id="8">
						<location x="583" y="66"></location>
						
						<arguments><language name="scala"><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument></language><language name="glsl"><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument></language><language name="prediction"><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="createvec3_uid4e52429c" returntype="Vec3" outname="v">Vec3(x,y,z)</function></language><language name="glsl"><function name="createvec3_uid4e52429c" returntype="vec3" outname="v">return vec3(x,y,z);</function></language><language name="prediction"><function name="createvec3_uid4e52429c" returntype="Volume" outname="v">Volume(x,y,z)</function></language></functions>
					</node><node type="custom" title="Blobby Model" id="3">
						<location x="910" y="136"></location>
						<size width="293" height="185"></size>
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language></arguments>

						<sliders>
							<slider name="lin1" formula="s" value="76"></slider><slider name="lin2" formula="s" value="57"></slider><slider name="exp1" formula="pow(256,((s-0.5)*2))" value="45"></slider><slider name="exp2" formula="pow(256,((s-0.5)*2))" value="51"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="custom_f3_uid4e52429c" returntype="Double" outname="o">-1+(exp(exp1*a) + exp(exp1*b))</function></language></functions>
					</node><node type="custom" title="Difference" id="11">
						<location x="903" y="615"></location>
						<size width="300" height="198"></size>
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language></arguments>

						<sliders>
							<slider name="lin1" formula="s" value="50"></slider><slider name="lin2" formula="s" value="50"></slider><slider name="exp1" formula="pow(256,((s-0.5)*2))" value="50"></slider><slider name="exp2" formula="pow(256,((s-0.5)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="custom_f11_uid4e52429c" returntype="Double" outname="o">a-b-sqrt(a*a+b*b)</function></language></functions>
					</node><node type="custom" title="Union" id="4">
						<location x="916" y="364"></location>
						<size width="295" height="196"></size>
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language></arguments>

						<sliders>
							<slider name="lin1" formula="s" value="48"></slider><slider name="lin2" formula="s" value="50"></slider><slider name="exp1" formula="pow(256,((s-0.5)*2))" value="50"></slider><slider name="exp2" formula="pow(256,((s-0.5)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="custom_f4_uid4e52429c" returntype="Double" outname="o">a+b+sqrt(a*a+b*b)</function></language></functions>
					</node><node type="predefined" title="2nd Sphere" id="6">
						<location x="682" y="246"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256, s*2-1)" value="58"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere_uid4e52429c" returntype="Double" outname="o">radius - sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere_uid4e52429c" returntype="float" outname="o">return radius - sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere_uid4e52429c" returntype="Interval" outname="o">-interval.length(v) + radius</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="10">
						<location x="373" y="81"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="52"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv_uid4e52429c" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx_uid4e52429c" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy_uid4e52429c" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz_uid4e52429c" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv_uid4e52429c" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx_uid4e52429c" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy_uid4e52429c" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz_uid4e52429c" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv_uid4e52429c" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx_uid4e52429c" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy_uid4e52429c" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz_uid4e52429c" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="1st Sphere" id="9">
						<location x="682" y="95"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256, s*2-1)" value="66"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere_uid4e52429c" returntype="Double" outname="o">radius - sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere_uid4e52429c" returntype="float" outname="o">return radius - sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere_uid4e52429c" returntype="Interval" outname="o">-interval.length(v) + radius</function></language></functions>
					</node><node type="predefined" title="Vec3" id="7">
						<location x="583" y="186"></location>
						
						<arguments><language name="scala"><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument></language><language name="glsl"><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument></language><language name="prediction"><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="createvec3_uid4e52429c" returntype="Vec3" outname="v">Vec3(x,y,z)</function></language><language name="glsl"><function name="createvec3_uid4e52429c" returntype="vec3" outname="v">return vec3(x,y,z);</function></language><language name="prediction"><function name="createvec3_uid4e52429c" returntype="Volume" outname="v">Volume(x,y,z)</function></language></functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="8" connector="1"></in>
						<out nodeid="10" connector="2"></out>
					</connection><connection>
						<in nodeid="1" connector="0"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="2"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="0"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="1"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="8" connector="0"></in>
						<out nodeid="10" connector="1"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="10" connector="1"></out>
					</connection><connection>
						<in nodeid="3" connector="2"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="0"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="2"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="1"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="1"></in>
						<out nodeid="10" connector="2"></out>
					</connection><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="8" connector="2"></in>
						<out nodeid="10" connector="3"></out>
					</connection><connection>
						<in nodeid="12" connector="0"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="2"></in>
						<out nodeid="10" connector="3"></out>
					</connection></connections>
		</document>