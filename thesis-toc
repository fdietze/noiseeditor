Vorhersage und Interaktive Komposition von Noise-Funktionen zum Rendern Unbeschränkter Prozeduraler Welten in Echtzeit
Prediction and Interactive Composition of Noise Functions for Realtime Rendering of Infinite Procedural Worlds

Felix Dietze 29.08.2011

Einführung (1 Seite)
	- Beschreibung des Noise-Editors
	- Prediction über Intervall-Arithmetik und konvexer Hülle von Bezier-Kurven

Einleitung (15%)
	- Perlins Original-Noise-Paper und die ersten ansätze für Noise-Funktions-Kompositionen
	- Prozedurale Textur-Node-Editoren
	- Intervallarithmetik und Affine Arithmetik im Ray-Casting
	
Hauptteil: Techniken(60%)
	- Anforderungen an ein Funktionskompositions-Werkzeug
	- Architektur des Noise-Node-Editors
		- Scala/Swing, Components
		- Traits für Eigenschaften/Features von Swing-Componenten (Resize, Move, ScrollZoom)
		- Event-Fluss
		- Definition von Nodes/Kategorien
			- Instanz eines Nodes als Swing-Komponente
		- Verbindung von Nodes
			- unterliegende Datenstruktur
			- Konnektoren und Datentypen
				- (Keine Listen, d.h. Gruppierung von Argumenten, wegen Komplexität der Codegenerierung und Performance-Problemen)
		- Code-Generierung
			- Module für unterschiedliche Anwendungszwecke
			- Baum-Modell für beliebige Sprachen
			- Beispielgenerierung: Scala-Code
		- Echtzeit-Vorschau durch Laufzeit-Compilierung von generiertem Code
			- Interpreter-Warteschlange
			- Binden von Slider-Werten an compilierten Code
			- Interpretierte Formeln für Slider
		- Weitere Features
			- Custom-Nodes
			- Perspektiven
			- Verschiedene Ansichten der Preview, u.a. Tiefen-Ansicht, Normalisierung
			- Materialien
			- Laden/Speichern von Kompositionen mit XML
			- Verschiebbarkeit/Scrollbarkeit der Arbeitsfläche
	- Interessante Kompositionen
		- Oberfläche
		- Gesteinsschichten
		- Verzerrung durch Noise
		- Technodots
		- Schachbrett-Muster
		- ...?
	- Anwndungsbeispiele
		- Game-Engine
		- ...?
	- Intervall-Vorhersage durch Intervallarithmetik
		- Intervallarithmetik auf einfachen Funktionen
		- Intervallarithmetik für Improved Perlin Noise
			- Perlin-Noise ist Polynom
			- Polynome lassen sich in Bezierkurven mit regelmäßiger Anordnung der Kontrollpunkte umrechnen
			- Bezierkurven lassen sich leicht zerschneiden
			- Bezierkurven liegen in der Konvexen hülle der Kontrollpunkte
			- Das Minimum und Maximum der Kontrollpunkte bestimmt den zu erwartenden Wertebereich.
			- Implementierung
		- Vorhersage in der GameEngine
			- Bereichsanfrage von Oktanten
			- Kontrollpunkt-cache in der Noise-Prediction
			- Vorhersage-Code-Generierung mit dem Noise-Editor
			
	
Resultate(15%)
future(10%)
	- Affine Arithmetik für die Vorhersage
	- Ausweitung der Modulfähigkeiten im NoiseEditor
