<?xml version='1.0' encoding='UTF-8'?>
<document>
			<module name="GameEngine"></module>
			<nodes><node type="predefined" title="Add Exp Constant" id="33">
						<location x="-115" y="651"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="34"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="RGB" id="21">
						<location x="1196" y="487"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="0"></slider><slider name="g" formula="s" value="13"></slider><slider name="b" formula="s" value="70"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Vec3" id="35">
						<location x="189" y="475"></location>
						
						<arguments><language name="scala"><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument></language><language name="glsl"><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument></language><language name="prediction"><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="createvec3" returntype="Vec3" outname="v">Vec3(x,y,z)</function></language><language name="glsl"><function name="createvec3" returntype="vec3" outname="v">return vec3(x,y,z);</function></language><language name="prediction"><function name="createvec3" returntype="Volume" outname="v">Volume(x,y,z)</function></language></functions>
					</node><node type="predefined" title="Sphere" id="32">
						<location x="440" y="373"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256,((s-0.5)*2))" value="83"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere" returntype="Double" outname="o">radius-sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere" returntype="float" outname="o">return radius-sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere" returntype="Interval" outname="o">-intervalsqrt(volumedot(v,v)) + radius</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="6">
						<location x="786" y="458"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(256, s1)-1 else 1-pow(256, -s1)" value="81"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="13">
						<location x="443" y="-65"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="Min2" id="22">
						<location x="1067" y="615"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument><argument name="b" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="min2" returntype="Double" outname="o">min(a,b)</function></language><language name="glsl"><function name="min2" returntype="float" outname="o">return min(a,b);</function></language><language name="prediction"><function name="min2" returntype="Interval" outname="o">intervalmin(a,b)</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="28">
						<location x="742" y="560"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="55"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="98"></slider><slider name="offset" formula="(s-0.5)*2" value="28"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="RGB" id="18">
						<location x="1252" y="817"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="48"></slider><slider name="g" formula="s" value="57"></slider><slider name="b" formula="s" value="3"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="30">
						<location x="720" y="155"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="76"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="45"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="26">
						<location x="1019" y="-149"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="57"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="79"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="RGB" id="10">
						<location x="1359" y="77"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="100"></slider><slider name="g" formula="s" value="34"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="4">
						<location x="1033" y="775"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="56"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="Sphere" id="12">
						<location x="439" y="300"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256,((s-0.5)*2))" value="86"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere" returntype="Double" outname="o">radius-sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere" returntype="float" outname="o">return radius-sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere" returntype="Interval" outname="o">-intervalsqrt(volumedot(v,v)) + radius</function></language></functions>
					</node><node type="predefined" title="RGB" id="24">
						<location x="1362" y="-112"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="100"></slider><slider name="g" formula="s" value="56"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="9">
						<location x="1623" y="393"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="19">
						<location x="1524" y="8"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="RGB" id="17">
						<location x="1245" y="703"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="59"></slider><slider name="g" formula="s" value="51"></slider><slider name="b" formula="s" value="42"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="8">
						<location x="-215" y="353"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="70"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="Max 3" id="7">
						<location x="984" y="306"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument><argument name="c" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument><argument name="b" datatype="Interval"></argument><argument name="c" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="max3" returntype="Double" outname="o">max(max(a,b),c)</function></language><language name="glsl"><function name="max3" returntype="float" outname="o">return max(max(a,b),c);</function></language><language name="prediction"><function name="max3" returntype="Interval" outname="o">intervalmax(intervalmax(a,b),c)</function></language></functions>
					</node><node type="predefined" title="Sphere" id="29">
						<location x="491" y="635"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256,((s-0.5)*2))" value="90"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere" returntype="Double" outname="o">radius-sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere" returntype="float" outname="o">return radius-sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere" returntype="Interval" outname="o">-intervalsqrt(volumedot(v,v)) + radius</function></language></functions>
					</node><node type="predefined" title="Negate" id="27">
						<location x="969" y="570"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="negate" returntype="Double" outname="o">-a</function></language><language name="glsl"><function name="negate" returntype="float" outname="o">return -a;</function></language><language name="prediction"><function name="negate" returntype="Interval" outname="o">-a</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="11">
						<location x="-145" y="566"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="86"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="5">
						<location x="1378" y="486"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							<slider name="shift" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(256, s1)-1 else 1-pow(256, -s1)" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matmix" returntype="Material" outname="m">if(t &gt;= shift) m1 else m2</function></language><language name="glsl"><function name="matmix" returntype="vec4" outname="m">return t &gt;= shift ? m1 : m2</function></language></functions>
					</node><node type="preview" title="Preview" id="3">
						<location x="1789" y="333"></location>
						<size width="604" height="336"></size><image offsety="-488.662163147475" offsetx="-1830.0590285575072" zoom="7.28904836851033"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="59.89223344500674"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="1">
						<location x="746" y="-154"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="65"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="53"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Z-Rotation" id="36">
						<location x="262" y="214"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="angle" formula="(s*2-1)*Pi" value="48"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="rotate" returntype="Vec3" outname="o">Mat3(Mat3x4 rotateZ angle) * v</function></language><language name="glsl"><function name="rotate" returntype="vec3" outname="o">Mat3(Mat3x4 rotateZ angle) * v</function></language><language name="prediction"><function name="rotate" returntype="Volume" outname="o">Mat3(Mat3x4 rotateZ angle) * v</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="20">
						<location x="1395" y="753"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="2">
						<location x="1513" y="677"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							<slider name="shift" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(256, s1)-1 else 1-pow(256, -s1)" value="49"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matmix" returntype="Material" outname="m">if(t &gt;= shift) m1 else m2</function></language><language name="glsl"><function name="matmix" returntype="vec4" outname="m">return t &gt;= shift ? m1 : m2</function></language></functions>
					</node><node type="predefined" title="RGB" id="16">
						<location x="1261" y="297"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="53"></slider><slider name="g" formula="s" value="35"></slider><slider name="b" formula="s" value="20"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Scale Vec3" id="34">
						<location x="270" y="636"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="x" formula="pow(256, s*2-1)" value="47"></slider><slider name="y" formula="pow(256, s*2-1)" value="47"></slider><slider name="z" formula="pow(256, s*2-1)" value="78"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalevec3" returntype="Vec3" outname="o">v*Vec3(x,y,z)</function></language><language name="glsl"><function name="scalevec3" returntype="vec3" outname="o">return v*vec3(x,y,z);</function></language><language name="prediction"><function name="scalevec3" returntype="Volume" outname="o">v*Volume(Vec3(x,y,z))</function></language></functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="20" connector="2"></in>
						<out nodeid="18" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="0"></in>
						<out nodeid="35" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="1"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="22" connector="1"></in>
						<out nodeid="28" connector="0"></out>
					</connection><connection>
						<in nodeid="35" connector="2"></in>
						<out nodeid="33" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="0"></in>
						<out nodeid="8" connector="3"></out>
					</connection><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="1" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="27" connector="0"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="1"></in>
						<out nodeid="32" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="0"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="2"></in>
						<out nodeid="22" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="4"></in>
						<out nodeid="32" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="2"></in>
						<out nodeid="21" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="2"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="1"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="0"></in>
						<out nodeid="19" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="30" connector="4"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="4"></in>
						<out nodeid="29" connector="0"></out>
					</connection><connection>
						<in nodeid="35" connector="0"></in>
						<out nodeid="8" connector="1"></out>
					</connection><connection>
						<in nodeid="20" connector="0"></in>
						<out nodeid="17" connector="0"></out>
					</connection><connection>
						<in nodeid="35" connector="1"></in>
						<out nodeid="8" connector="2"></out>
					</connection><connection>
						<in nodeid="9" connector="2"></in>
						<out nodeid="16" connector="0"></out>
					</connection><connection>
						<in nodeid="20" connector="1"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="29" connector="0"></in>
						<out nodeid="34" connector="0"></out>
					</connection><connection>
						<in nodeid="36" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="1"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="0"></in>
						<out nodeid="24" connector="0"></out>
					</connection><connection>
						<in nodeid="34" connector="0"></in>
						<out nodeid="35" connector="0"></out>
					</connection><connection>
						<in nodeid="30" connector="0"></in>
						<out nodeid="36" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="1"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="32" connector="0"></in>
						<out nodeid="35" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="1"></in>
						<out nodeid="26" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="2"></in>
						<out nodeid="20" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="0"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="2"></in>
						<out nodeid="10" connector="0"></out>
					</connection><connection>
						<in nodeid="22" connector="0"></in>
						<out nodeid="27" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="22" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="33" connector="0"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="3"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="0"></in>
						<out nodeid="9" connector="0"></out>
					</connection></connections>
		</document>