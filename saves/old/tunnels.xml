<?xml version='1.0' encoding='UTF-8'?>
<document>
			<nodes><node type="predefined" title="Product" id="6">
						<pos x="567" y="172"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308958664_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Constant 1/256..256" id="37">
						<pos x="190" y="767"></pos>
						
						<sliders>
							<slider name="factor" value="70"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="constant256_1308963222" outname=" " outtype="Float">pow(256,((factor-0.5f)*2f))</function>
						</functions>
					</node><node type="preview" title="Preview" id="10">
						<pos x="963" y="219"></pos>
						<size width="304" height="371"></size><image offsety="2146.656" offsetx="-11517.745" zoom="0.8954308"></image><depth checked="false"></depth><zslider value="21"></zslider>
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="d:Float"></intype><intype type="m:Material"></intype>
						</intypes>
		
						<functions>
							
						</functions>
					</node><node type="predefined" title="Vec3*s" id="27">
						<pos x="150" y="173"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="v:Vec3=Vec3(0)"></intype><intype type="s:Float"></intype>
						</intypes>
		
						<functions>
							<function name="vec3p_1308963222" outname=" " outtype="Vec3">v*s</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="23">
						<pos x="247" y="337"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="50"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Min" id="16">
						<pos x="894" y="362"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="min_1308963222" outname=" " outtype="Float">xs.min</function>
						</functions>
					</node><node type="predefined" title="Feature Source" id="1">
						<pos x="-221" y="323"></pos>
						
						<sliders>
							<slider name="scale" value="76"></slider><slider name="x" value="50"></slider><slider name="y" value="50"></slider><slider name="z" value="50"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="fsrcv_1308958664_1308963222" outname="v" outtype="Vec3">(source + (Vec3(x,y,z)-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcx_1308958664_1308963222" outname="x" outtype="Float">(source.x + (x-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcy_1308958664_1308963222" outname="y" outtype="Float">(source.y + (y-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function><function name="fsrcz_1308958664_1308963222" outname="z" outtype="Float">(source.z + (z-0.5f)*256f) * (pow(256,((0.5f-scale)*2f)))</function>
						</functions>
					</node><node type="predefined" title="Vec3*s" id="32">
						<pos x="157" y="564"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="v:Vec3=Vec3(0)"></intype><intype type="s:Float"></intype>
						</intypes>
		
						<functions>
							<function name="vec3p_1308963222" outname=" " outtype="Vec3">v*s</function>
						</functions>
					</node><node type="predefined" title="Vec3" id="33">
						<pos x="74" y="165"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="x:Seq[Float]"></intype><intype type="y:Seq[Float]"></intype><intype type="z:Seq[Float]"></intype>
						</intypes>
		
						<functions>
							<function name="vec3_1308963222" outname=" " outtype="Vec3">Vec3(x.sum,y.sum,z.sum)</function>
						</functions>
					</node><node type="predefined" title="Vec3" id="35">
						<pos x="72" y="551"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="x:Seq[Float]"></intype><intype type="y:Seq[Float]"></intype><intype type="z:Seq[Float]"></intype>
						</intypes>
		
						<functions>
							<function name="vec3_1308963222" outname=" " outtype="Vec3">Vec3(x.sum,y.sum,z.sum)</function>
						</functions>
					</node><node type="predefined" title="Product" id="28">
						<pos x="470" y="199"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Constant -1..1" id="15">
						<pos x="581" y="771"></pos>
						
						<sliders>
							<slider name="factor" value="88"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="constantm1_1308958664_1308963222" outname=" " outtype="Float">(factor-0.5f)*2f</function>
						</functions>
					</node><node type="predefined" title="Product" id="29">
						<pos x="466" y="387"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="24">
						<pos x="256" y="531"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="50"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="12">
						<pos x="662" y="341"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="51"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308958664_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Constant 1/256..256" id="36">
						<pos x="-32" y="761"></pos>
						
						<sliders>
							<slider name="factor" value="33"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="constant256_1308963222" outname=" " outtype="Float">pow(256,((factor-0.5f)*2f))</function>
						</functions>
					</node><node type="predefined" title="Vec3" id="34">
						<pos x="77" y="354"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="x:Seq[Float]"></intype><intype type="y:Seq[Float]"></intype><intype type="z:Seq[Float]"></intype>
						</intypes>
		
						<functions>
							<function name="vec3_1308963222" outname=" " outtype="Vec3">Vec3(x.sum,y.sum,z.sum)</function>
						</functions>
					</node><node type="predefined" title="Constant 1/256..256" id="8">
						<pos x="383" y="769"></pos>
						
						<sliders>
							<slider name="factor" value="0"></slider>
						</sliders>
		
						<intypes>
							
						</intypes>
		
						<functions>
							<function name="constant256_1308958664_1308963222" outname=" " outtype="Float">pow(256,((factor-0.5f)*2f))</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="9">
						<pos x="662" y="159"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="50"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308958664_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Product" id="2">
						<pos x="567" y="585"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308958664_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Product" id="30">
						<pos x="471" y="583"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Product" id="4">
						<pos x="569" y="391"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="xs:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="product_1308958664_1308963222" outname=" " outtype="Float">xs.product</function>
						</functions>
					</node><node type="predefined" title="Vec3*s" id="31">
						<pos x="148" y="365"></pos>
						
						<sliders>
							
						</sliders>
		
						<intypes>
							<intype type="v:Vec3=Vec3(0)"></intype><intype type="s:Float"></intype>
						</intypes>
		
						<functions>
							<function name="vec3p_1308963222" outname=" " outtype="Vec3">v*s</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="25">
						<pos x="254" y="147"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="50"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node><node type="predefined" title="Feature Noise" id="3">
						<pos x="661" y="519"></pos>
						
						<sliders>
							<slider name="size" value="50"></slider><slider name="scale" value="50"></slider><slider name="offset" value="50"></slider>
						</sliders>
		
						<intypes>
							<intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype><intype type="x:Seq[Float]=Nil"></intype><intype type="y:Seq[Float]=Nil"></intype><intype type="z:Seq[Float]=Nil"></intype><intype type="add:Seq[Float]=Nil"></intype><intype type="sub:Seq[Float]=Nil"></intype>
						</intypes>
		
						<functions>
							<function name="fnoise_1308958664_1308963222" outname=" " outtype="Float">
			val invexpsize = pow(256,((0.5f-size)*2f))
			val expoutscale = pow(256,((scale-0.5f)*2f))/invexpsize
			val linearoutoffset = (offset-0.5f)*2f
			val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
			(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + add.sum - sub.sum
			</function>
						</functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="27" connector="1"></in>
						<out nodeid="36" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="2"></in>
						<out nodeid="29" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="3"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="31" connector="1"></in>
						<out nodeid="36" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="3"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="25" connector="0"></in>
						<out nodeid="27" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="32" connector="0"></in>
						<out nodeid="35" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="0"></in>
						<out nodeid="25" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="1"></in>
						<out nodeid="28" connector="0"></out>
					</connection><connection>
						<in nodeid="29" connector="0"></in>
						<out nodeid="37" connector="0"></out>
					</connection><connection>
						<in nodeid="23" connector="0"></in>
						<out nodeid="31" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="16" connector="0"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="33" connector="1"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="33" connector="2"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="9" connector="2"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="3" connector="3"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="0"></in>
						<out nodeid="37" connector="0"></out>
					</connection><connection>
						<in nodeid="34" connector="2"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="30" connector="0"></in>
						<out nodeid="37" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="28" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="2"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="3" connector="4"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="1"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="32" connector="1"></in>
						<out nodeid="36" connector="0"></out>
					</connection><connection>
						<in nodeid="35" connector="0"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="9" connector="1"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="2"></in>
						<out nodeid="29" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="4"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="16" connector="0"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="27" connector="0"></in>
						<out nodeid="33" connector="0"></out>
					</connection><connection>
						<in nodeid="10" connector="0"></in>
						<out nodeid="16" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="3"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="34" connector="0"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="31" connector="0"></in>
						<out nodeid="34" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="4"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="2"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="35" connector="1"></in>
						<out nodeid="1" connector="2"></out>
					</connection><connection>
						<in nodeid="24" connector="0"></in>
						<out nodeid="32" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="12" connector="3"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="29" connector="0"></in>
						<out nodeid="23" connector="0"></out>
					</connection><connection>
						<in nodeid="30" connector="0"></in>
						<out nodeid="24" connector="0"></out>
					</connection><connection>
						<in nodeid="16" connector="0"></in>
						<out nodeid="12" connector="0"></out>
					</connection></connections>
		</document>