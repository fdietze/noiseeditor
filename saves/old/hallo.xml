<?xml version='1.0' encoding='UTF-8'?>
<document>
  <nodes>
    <node type="preview" title="Preview" id="1">
      <pos x="470" y="56"></pos>
      <size width="282" height="318"></size>
      <image offsety="-21.429043" offsetx="12.818622" zoom="0.1771561"></image>
      <depth checked="true"></depth>
      <zslider value="57"></zslider>
      <sliders> </sliders>
      <intypes>
        <intype type="d:Float"></intype>
        <intype type="m:Material"></intype>
      </intypes>
      <functions> </functions>
    </node>
    <node type="predefined" title="Source" id="3">
      <pos x="24" y="117"></pos>
      <sliders> </sliders>
      <intypes> </intypes>
      <functions>
        <function name="sourcev" outtype="Vec3">source</function>
        <function name="sourcex" outtype="Float">source.x</function>
        <function name="sourcey" outtype="Float">source.y</function>
        <function name="sourcez" outtype="Float">source.z</function>
      </functions>
    </node>
    <node type="predefined" title="Feature Noise" id="4">
      <pos x="157" y="248"></pos>
      <sliders>
        <slider name="size" value="80"></slider>
        <slider name="outscale" value="85"></slider>
        <slider name="outoffset" value="50"></slider>
      </sliders>
      <intypes>
        <intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype>
        <intype type="x:Seq[Float]=Nil"></intype>
        <intype type="y:Seq[Float]=Nil"></intype>
        <intype type="z:Seq[Float]=Nil"></intype>
        <intype type="plus:Seq[Float]=Nil"></intype>
        <intype type="minus:Seq[Float]=Nil"></intype>
      </intypes>
      <functions>
        <function name="fnoise" outtype="Float">
          val invexpsize = pow(256,((0.5f-size)*2f))
		val expoutscale = pow(256,((outscale-0.5f)*2f))
		val linearoutoffset = (outoffset-0.5f)*2f
		val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
		(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + plus.sum - minus.sum
        </function>
      </functions>
    </node>
    <node type="predefined" title="Feature Noise" id="5">
      <pos x="200" y="44"></pos>
      <sliders>
        <slider name="size" value="58"></slider>
        <slider name="outscale" value="63"></slider>
        <slider name="outoffset" value="50"></slider>
      </sliders>
      <intypes>
        <intype type="v:Seq[Vec3]=Seq(Vec3(0))"></intype>
        <intype type="x:Seq[Float]=Nil"></intype>
        <intype type="y:Seq[Float]=Nil"></intype>
        <intype type="z:Seq[Float]=Nil"></intype>
        <intype type="plus:Seq[Float]=Nil"></intype>
        <intype type="minus:Seq[Float]=Nil"></intype>
      </intypes>
      <functions>
        <function name="fnoise" outtype="Float">
          val invexpsize = pow(256,((0.5f-size)*2f))
		val expoutscale = pow(256,((outscale-0.5f)*2f))
		val linearoutoffset = (outoffset-0.5f)*2f
		val sumv = v.reduce( (x,y) =&gt; x+y ) + Vec3(x.sum,y.sum,z.sum);
		(noise1(sumv*invexpsize)+linearoutoffset)*expoutscale + plus.sum - minus.sum
        </function>
      </functions>
    </node>
  </nodes>
  <connections>
    <connection>
      <in nodeid="5" connector="4"></in>
      <out nodeid="4" connector="0"></out>
    </connection>
    <connection>
      <in nodeid="4" connector="0"></in>
      <out nodeid="3" connector="0"></out>
    </connection>
    <connection>
      <in nodeid="1" connector="0"></in>
      <out nodeid="5" connector="0"></out>
    </connection>
    <connection>
      <in nodeid="5" connector="0"></in>
      <out nodeid="3" connector="0"></out>
    </connection>
    <connection>
      <in nodeid="5" connector="4"></in>
      <out nodeid="3" connector="2"></out>
    </connection>
    <connection>
      <in nodeid="4" connector="4"></in>
      <out nodeid="3" connector="2"></out>
    </connection>
  </connections>
</document>