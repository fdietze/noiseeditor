<?xml version='1.0' encoding='UTF-8'?>
<document>
			<module name="GameEngine"></module>
			<nodes><node type="predefined" title="RGB" id="9">
						<location x="690" y="452"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="34"></slider><slider name="g" formula="s" value="22"></slider><slider name="b" formula="s" value="66"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e4e6d8a" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt)</function></language><language name="glsl"><function name="matrgb_uid4e4e6d8a" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="RGB" id="10">
						<location x="715" y="247"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="90"></slider><slider name="g" formula="s" value="50"></slider><slider name="b" formula="s" value="90"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e4e6d8a" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt)</function></language><language name="glsl"><function name="matrgb_uid4e4e6d8a" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Multiply Exp Constant" id="4">
						<location x="68" y="329"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256, s*2-1)" value="38"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="multiplyconstantexp_uid4e4e6d8a" returntype="Double" outname="o">a*value</function></language><language name="glsl"><function name="multiplyconstantexp_uid4e4e6d8a" returntype="float" outname="o">return a*value;</function></language><language name="prediction"><function name="multiplyconstantexp_uid4e4e6d8a" returntype="Interval" outname="o">a*value</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="5">
						<location x="465" y="51"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256, 1-s*2)" value="62"></slider><slider name="scale" formula="pow(256, s*2-1)" value="56"></slider><slider name="offset" formula="s*2-1" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e4e6d8a" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e4e6d8a" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e4e6d8a" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="6">
						<location x="858" y="342"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							<slider name="shift" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(257, s1)-1 else 1-pow(257, -s1)" value="53"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matmix_uid4e4e6d8a" returntype="Material" outname="m">if(t &gt;= shift) m1 else m2</function></language><language name="glsl"><function name="matmix_uid4e4e6d8a" returntype="vec4" outname="m">return t &gt;= shift ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="11">
						<location x="473" y="262"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256, 1-s*2)" value="50"></slider><slider name="scale" formula="pow(256, s*2-1)" value="50"></slider><slider name="offset" formula="s*2-1" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e4e6d8a" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e4e6d8a" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e4e6d8a" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="3">
						<location x="714" y="24"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256, 1-s*2)" value="73"></slider><slider name="scale" formula="pow(256, s*2-1)" value="50"></slider><slider name="offset" formula="s*2-1" value="41"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e4e6d8a" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e4e6d8a" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e4e6d8a" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="preview" title="Preview" id="1">
						<location x="1050" y="8"></location>
						<size width="362" height="343"></size><image offsety="-8.100000000000001" offsetx="-6.5" zoom="0.1"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result_uid4e4e6d8a" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="8">
						<location x="210" y="52"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256, 1-s*2)" value="65"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv_uid4e4e6d8a" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx_uid4e4e6d8a" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy_uid4e4e6d8a" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz_uid4e4e6d8a" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv_uid4e4e6d8a" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx_uid4e4e6d8a" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy_uid4e4e6d8a" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz_uid4e4e6d8a" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv_uid4e4e6d8a" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx_uid4e4e6d8a" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy_uid4e4e6d8a" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz_uid4e4e6d8a" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="Time" id="7">
						<location x="8" y="317"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="timeseconds_uid4e4e6d8a" returntype="Double" outname="s">InterpreterUptime</function></language><language name="glsl"><function name="timeseconds_uid4e4e6d8a" returntype="float" outname="s">return time;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="2">
						<location x="258" y="253"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256, 1-s*2)" value="57"></slider><slider name="scale" formula="pow(256, s*2-1)" value="63"></slider><slider name="offset" formula="s*2-1" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e4e6d8a" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e4e6d8a" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e4e6d8a" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="3" connector="1"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="1"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="10" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="2"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="2"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="4"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="3"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="1" connector="1"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="3"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="0"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="1"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="1" connector="0"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="2"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="5"></in>
						<out nodeid="8" connector="3"></out>
					</connection></connections>
		</document>