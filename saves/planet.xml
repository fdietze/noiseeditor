<?xml version='1.0' encoding='UTF-8'?>
<document>
			<module name="GameEngine"></module>
			<nodes><node type="predefined" title="Min 2" id="16">
						<location x="-386" y="336"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument><argument name="b" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="min2_uid4e56524d" returntype="Double" outname="o">min(a,b)</function></language><language name="glsl"><function name="min2_uid4e56524d" returntype="float" outname="o">return min(a,b);</function></language><language name="prediction"><function name="min2_uid4e56524d" returntype="Interval" outname="o">interval.min(a,b)</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="33">
						<location x="-1685" y="69"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="79"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv_uid4e56524d" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx_uid4e56524d" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy_uid4e56524d" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz_uid4e56524d" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv_uid4e56524d" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx_uid4e56524d" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy_uid4e56524d" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz_uid4e56524d" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv_uid4e56524d" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx_uid4e56524d" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy_uid4e56524d" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz_uid4e56524d" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="Shift Planet" id="14">
						<location x="-1585" y="367"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="34"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp_uid4e56524d" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp_uid4e56524d" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp_uid4e56524d" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="Earth" id="20">
						<location x="-740" y="43"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="53"></slider><slider name="g" formula="s" value="35"></slider><slider name="b" formula="s" value="20"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Shift Planet" id="1">
						<location x="-1615" y="282"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="81"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp_uid4e56524d" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp_uid4e56524d" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp_uid4e56524d" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="10">
						<location x="-747" y="176"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(256, s1)-1 else 1-pow(256, -s1)" value="71"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp_uid4e56524d" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp_uid4e56524d" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp_uid4e56524d" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="predefined" title="Liquid Core" id="9">
						<location x="-1040" y="155"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256, s*2-1)" value="79"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere_uid4e56524d" returntype="Double" outname="o">radius - sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere_uid4e56524d" returntype="float" outname="o">return radius - sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere_uid4e56524d" returntype="Interval" outname="o">-interval.length(v) + radius</function></language></functions>
					</node><node type="predefined" title="Small Mountains" id="6">
						<location x="-514" y="5"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256, 1-s*2)" value="50"></slider><slider name="scale" formula="pow(256, s*2-1)" value="40"></slider><slider name="offset" formula="s*2-1" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e56524d" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e56524d" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e56524d" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Big Mountains" id="24">
						<location x="-498" y="-216"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="72"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="36"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e56524d" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e56524d" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e56524d" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Sum 2" id="28">
						<location x="-245" y="-77"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument><argument name="b" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="sum2_uid4e56524d" returntype="Double" outname="o">a+b</function></language><language name="glsl"><function name="sum2_uid4e56524d" returntype="float" outname="o">return a+b;</function></language><language name="prediction"><function name="sum2_uid4e56524d" returntype="Interval" outname="o">a+b</function></language></functions>
					</node><node type="predefined" title="Innter Core" id="29">
						<location x="-108" y="-396"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="100"></slider><slider name="g" formula="s" value="56"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Vec3" id="27">
						<location x="-1281" y="191"></location>
						
						<arguments><language name="scala"><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument></language><language name="glsl"><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument></language><language name="prediction"><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="createvec3_uid4e56524d" returntype="Vec3" outname="v">Vec3(x,y,z)</function></language><language name="glsl"><function name="createvec3_uid4e56524d" returntype="vec3" outname="v">return vec3(x,y,z);</function></language><language name="prediction"><function name="createvec3_uid4e56524d" returntype="Volume" outname="v">Volume(x,y,z)</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="22">
						<location x="-1027" y="-349"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv_uid4e56524d" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx_uid4e56524d" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy_uid4e56524d" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz_uid4e56524d" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv_uid4e56524d" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx_uid4e56524d" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy_uid4e56524d" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz_uid4e56524d" returntype="float" outname="z">return world.z * scale;</function></language><language name="prediction"><function name="scalesrcv_uid4e56524d" returntype="Volume" outname="v">world   * scale</function><function name="scalesrcx_uid4e56524d" returntype="Interval" outname="x">world.x * scale</function><function name="scalesrcy_uid4e56524d" returntype="Interval" outname="y">world.y * scale</function><function name="scalesrcz_uid4e56524d" returntype="Interval" outname="z">world.z * scale</function></language></functions>
					</node><node type="predefined" title="Sqeeze" id="13">
						<location x="-1200" y="352"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="x" formula="pow(256, s*2-1)" value="47"></slider><slider name="y" formula="pow(256, s*2-1)" value="47"></slider><slider name="z" formula="pow(256, s*2-1)" value="78"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalevec3_uid4e56524d" returntype="Vec3" outname="o">v*Vec3(x,y,z)</function></language><language name="glsl"><function name="scalevec3_uid4e56524d" returntype="vec3" outname="o">return v*vec3(x,y,z);</function></language><language name="prediction"><function name="scalevec3_uid4e56524d" returntype="Volume" outname="o">v*Volume(Vec3(x,y,z))</function></language></functions>
					</node><node type="predefined" title="Size of Asteroids" id="2">
						<location x="-729" y="264"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="63"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="100"></slider><slider name="offset" formula="(s-0.5)*2" value="14"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e56524d" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e56524d" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e56524d" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Negate" id="26">
						<location x="-486" y="249"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="negate_uid4e56524d" returntype="Double" outname="o">-a</function></language><language name="glsl"><function name="negate_uid4e56524d" returntype="float" outname="o">return -a;</function></language><language name="prediction"><function name="negate_uid4e56524d" returntype="Interval" outname="o">-a</function></language></functions>
					</node><node type="predefined" title="Moving Magma" id="4">
						<location x="-663" y="-434"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="65"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="53"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e56524d" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e56524d" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e56524d" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="25">
						<location x="-9" y="223"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							<slider name="shift" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(257, s1)-1 else 1-pow(257, -s1)" value="49"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matmix_uid4e56524d" returntype="Material" outname="m">if(t &gt;= shift) m1 else m2</function></language><language name="glsl"><function name="matmix_uid4e56524d" returntype="vec4" outname="m">return t &gt;= shift ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Time" id="3">
						<location x="-795" y="-303"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language><language name="prediction"></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="timeseconds_uid4e56524d" returntype="Double" outname="s">System.currentTimeMillis.toDouble/1000.0</function></language><language name="glsl"><function name="timeseconds_uid4e56524d" returntype="float" outname="s">return time;</function></language></functions>
					</node><node type="predefined" title="Water" id="11">
						<location x="-274" y="203"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="0"></slider><slider name="g" formula="s" value="13"></slider><slider name="b" formula="s" value="70"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Mountains" id="8">
						<location x="-233" y="583"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="48"></slider><slider name="g" formula="s" value="57"></slider><slider name="b" formula="s" value="3"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="31">
						<location x="176" y="89"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold_uid4e56524d" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold_uid4e56524d" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Outer Core" id="17">
						<location x="-111" y="-207"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="100"></slider><slider name="g" formula="s" value="34"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="15">
						<location x="-490" y="523"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="78"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp_uid4e56524d" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp_uid4e56524d" returntype="float" outname="o">return a+value;</function></language><language name="prediction"><function name="addconstantexp_uid4e56524d" returntype="Interval" outname="o">a+value</function></language></functions>
					</node><node type="preview" title="Preview" id="12">
						<location x="371" y="119"></location>
						<size width="416" height="411"></size><image offsety="-95.69810334158993" offsetx="-1153.6818628058045" zoom="6.626407607736663"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result_uid4e56524d" returntype="(Double, Material)" outname="result">(d,m)</function></language></functions>
					</node><node type="predefined" title="Planet" id="30">
						<location x="-1029" y="63"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256, s*2-1)" value="81"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere_uid4e56524d" returntype="Double" outname="o">radius - sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere_uid4e56524d" returntype="float" outname="o">return radius - sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere_uid4e56524d" returntype="Interval" outname="o">-interval.length(v) + radius</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="5">
						<location x="119" y="388"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							<slider name="shift" formula="val s1 = (s*2-1); if(s1 &gt;= 0) pow(257, s1)-1 else 1-pow(257, -s1)" value="49"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matmix_uid4e56524d" returntype="Material" outname="m">if(t &gt;= shift) m1 else m2</function></language><language name="glsl"><function name="matmix_uid4e56524d" returntype="vec4" outname="m">return t &gt;= shift ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Ring" id="7">
						<location x="-1005" y="337"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument></language></arguments>

						<sliders>
							<slider name="radius" formula="pow(256, s*2-1)" value="100"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="sphere_uid4e56524d" returntype="Double" outname="o">radius - sqrt(dot(v,v))</function></language><language name="glsl"><function name="sphere_uid4e56524d" returntype="float" outname="o">return radius - sqrt(dot(v,v));</function></language><language name="prediction"><function name="sphere_uid4e56524d" returntype="Interval" outname="o">-interval.length(v) + radius</function></language></functions>
					</node><node type="predefined" title="Moving Magma" id="21">
						<location x="-403" y="-439"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language><language name="prediction"><argument name="v" datatype="Volume"></argument><argument name="x" datatype="Interval"></argument><argument name="y" datatype="Interval"></argument><argument name="z" datatype="Interval"></argument><argument name="add" datatype="Interval"></argument><argument name="sub" datatype="Interval"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="57"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="71"></slider><slider name="offset" formula="(s-0.5)*2" value="15"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="perlinnoise3_uid4e56524d" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="perlinnoise3_uid4e56524d" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language><language name="prediction"><function name="perlinnoise3_uid4e56524d" returntype="Interval" outname="o">(noise3_prediction((v + Volume(x,y,z))*size)+offset)*scale/size + add - sub</function></language></functions>
					</node><node type="predefined" title="Asteroids" id="32">
						<location x="-261" y="449"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="56"></slider><slider name="g" formula="s" value="51"></slider><slider name="b" formula="s" value="48"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb_uid4e56524d" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb_uid4e56524d" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="23">
						<location x="-63" y="479"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold_uid4e56524d" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold_uid4e56524d" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="18">
						<location x="54" y="-276"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold_uid4e56524d" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold_uid4e56524d" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Max 3" id="19">
						<location x="241" y="239"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument><argument name="c" datatype="float"></argument></language><language name="prediction"><argument name="a" datatype="Interval"></argument><argument name="b" datatype="Interval"></argument><argument name="c" datatype="Interval"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="max3_uid4e56524d" returntype="Double" outname="o">max(max(a,b),c)</function></language><language name="glsl"><function name="max3_uid4e56524d" returntype="float" outname="o">return max(max(a,b),c);</function></language><language name="prediction"><function name="max3_uid4e56524d" returntype="Interval" outname="o">interval.max(interval.max(a,b),c)</function></language></functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="19" connector="1"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="1"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="25" connector="2"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="9" connector="0"></in>
						<out nodeid="27" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="1"></in>
						<out nodeid="5" connector="0"></out>
					</connection><connection>
						<in nodeid="15" connector="0"></in>
						<out nodeid="16" connector="0"></out>
					</connection><connection>
						<in nodeid="31" connector="2"></in>
						<out nodeid="20" connector="0"></out>
					</connection><connection>
						<in nodeid="24" connector="0"></in>
						<out nodeid="33" connector="0"></out>
					</connection><connection>
						<in nodeid="24" connector="4"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="0"></in>
						<out nodeid="28" connector="0"></out>
					</connection><connection>
						<in nodeid="1" connector="0"></in>
						<out nodeid="33" connector="3"></out>
					</connection><connection>
						<in nodeid="16" connector="1"></in>
						<out nodeid="2" connector="0"></out>
					</connection><connection>
						<in nodeid="23" connector="1"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="16" connector="0"></in>
						<out nodeid="26" connector="0"></out>
					</connection><connection>
						<in nodeid="31" connector="0"></in>
						<out nodeid="18" connector="0"></out>
					</connection><connection>
						<in nodeid="10" connector="0"></in>
						<out nodeid="30" connector="0"></out>
					</connection><connection>
						<in nodeid="27" connector="2"></in>
						<out nodeid="14" connector="0"></out>
					</connection><connection>
						<in nodeid="23" connector="0"></in>
						<out nodeid="32" connector="0"></out>
					</connection><connection>
						<in nodeid="21" connector="4"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="21" connector="1"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="14" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="1"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="25" connector="1"></in>
						<out nodeid="28" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="12" connector="0"></in>
						<out nodeid="19" connector="0"></out>
					</connection><connection>
						<in nodeid="21" connector="2"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="0"></in>
						<out nodeid="22" connector="0"></out>
					</connection><connection>
						<in nodeid="27" connector="1"></in>
						<out nodeid="33" connector="2"></out>
					</connection><connection>
						<in nodeid="2" connector="4"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="18" connector="0"></in>
						<out nodeid="29" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="2"></in>
						<out nodeid="16" connector="0"></out>
					</connection><connection>
						<in nodeid="18" connector="2"></in>
						<out nodeid="17" connector="0"></out>
					</connection><connection>
						<in nodeid="28" connector="0"></in>
						<out nodeid="24" connector="0"></out>
					</connection><connection>
						<in nodeid="27" connector="0"></in>
						<out nodeid="33" connector="1"></out>
					</connection><connection>
						<in nodeid="21" connector="0"></in>
						<out nodeid="22" connector="0"></out>
					</connection><connection>
						<in nodeid="13" connector="0"></in>
						<out nodeid="27" connector="0"></out>
					</connection><connection>
						<in nodeid="23" connector="2"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="33" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="0"></in>
						<out nodeid="25" connector="0"></out>
					</connection><connection>
						<in nodeid="26" connector="0"></in>
						<out nodeid="10" connector="0"></out>
					</connection><connection>
						<in nodeid="4" connector="4"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="33" connector="0"></out>
					</connection><connection>
						<in nodeid="25" connector="0"></in>
						<out nodeid="31" connector="0"></out>
					</connection><connection>
						<in nodeid="21" connector="3"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="31" connector="1"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="18" connector="1"></in>
						<out nodeid="21" connector="0"></out>
					</connection><connection>
						<in nodeid="30" connector="0"></in>
						<out nodeid="27" connector="0"></out>
					</connection><connection>
						<in nodeid="5" connector="2"></in>
						<out nodeid="23" connector="0"></out>
					</connection></connections>
		</document>