<?xml version='1.0' encoding='UTF-8'?>
<document>
			<module name="GameEngine"></module>
			<nodes><node type="predefined" title="World coordinates" id="12">
						<location x="17" y="904"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz" returntype="float" outname="z">return world.z * scale;</function></language></functions>
					</node><node type="predefined" title="World coordinates" id="1">
						<location x="-37" y="300"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="scale" formula="pow(256,((0.5-s)*2))" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="scalesrcv" returntype="Vec3" outname="v">world   * scale</function><function name="scalesrcx" returntype="Double" outname="x">world.x * scale</function><function name="scalesrcy" returntype="Double" outname="y">world.y * scale</function><function name="scalesrcz" returntype="Double" outname="z">world.z * scale</function></language><language name="glsl"><function name="scalesrcv" returntype="vec3" outname="v">return world.xyz * scale;</function><function name="scalesrcx" returntype="float" outname="x">return world.x * scale;</function><function name="scalesrcy" returntype="float" outname="y">return world.y * scale;</function><function name="scalesrcz" returntype="float" outname="z">return world.z * scale;</function></language></functions>
					</node><node type="preview" title="Preview" id="2">
						<location x="954" y="118"></location>
						<size width="774" height="729"></size><image offsety="-16.099999999999994" offsetx="-232.2000000000001" zoom="0.1"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language><language name="glsl"><argument name="d" datatype="float"></argument><argument name="m" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result" returntype="(Double, Material)" outname="result">(d,m)</function></language><language name="glsl"><function name="result" returntype="vec4" outname="result">return m;</function></language></functions>
					</node><node type="predefined" title="Stone" id="17">
						<location x="692" y="731"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matstone" returntype="Material" outname="m">Material(0x8e8e8e);</function></language><language name="glsl"><function name="matstone" returntype="vec4" outname="m">return vec4(0.56, 0.56, 0.56, 0.0);</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="8">
						<location x="666" y="480"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="Add Exp Constant" id="19">
						<location x="572" y="918"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="value" formula="pow(256,((s-0.5)*2))" value="55"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="addconstantexp" returntype="Double" outname="o">a+value</function></language><language name="glsl"><function name="addconstantexp" returntype="float" outname="o">return a+value;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="13">
						<location x="268" y="942"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="70"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="59"></slider><slider name="offset" formula="(s-0.5)*2" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="summedinputnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="summedinputnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="4">
						<location x="212" y="225"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="53"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="51"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="summedinputnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="summedinputnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language></functions>
					</node><node type="preview" title="Preview" id="20">
						<location x="1018" y="-468"></location>
						<size width="598" height="493"></size><image offsety="-13.8792238493725" offsetx="135.85443280547847" zoom="0.09090909090909093"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language><language name="glsl"><argument name="d" datatype="float"></argument><argument name="m" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result" returntype="(Double, Material)" outname="result">(d,m)</function></language><language name="glsl"><function name="result" returntype="vec4" outname="result">return m;</function></language></functions>
					</node><node type="predefined" title="Mix Materials" id="18">
						<location x="812" y="659"></location>
						
						<arguments><language name="scala"><argument name="m1" datatype="Material"></argument><argument name="t" datatype="Double"></argument><argument name="m2" datatype="Material"></argument></language><language name="glsl"><argument name="m1" datatype="vec4"></argument><argument name="t" datatype="float"></argument><argument name="m2" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="matthreshold" returntype="Material" outname="m">if(t &gt;= 0) m1 else m2;</function></language><language name="glsl"><function name="matthreshold" returntype="vec4" outname="m">return t &gt;= 0 ? m1 : m2;</function></language></functions>
					</node><node type="predefined" title="RGB" id="10">
						<location x="528" y="588"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="84"></slider><slider name="g" formula="s" value="49"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="predefined" title="Max2" id="15">
						<location x="812" y="393"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="max2" returntype="Double" outname="o">max(a,b)</function></language><language name="glsl"><function name="max2" returntype="float" outname="o">return max(a,b);</function></language></functions>
					</node><node type="predefined" title="Sum3" id="7">
						<location x="389" y="384"></location>
						
						<arguments><language name="scala"><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language><language name="glsl"><argument name="a" datatype="float"></argument><argument name="b" datatype="float"></argument><argument name="c" datatype="float"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="sum3" returntype="Double" outname="o">a+b+c</function></language><language name="glsl"><function name="sum3" returntype="float" outname="o">return a+b+c;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="3">
						<location x="467" y="250"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="29"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="50"></slider><slider name="offset" formula="(s-0.5)*2" value="42"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="summedinputnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="summedinputnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="11">
						<location x="231" y="48"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="85"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="47"></slider><slider name="offset" formula="(s-0.5)*2" value="30"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="summedinputnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="summedinputnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language></functions>
					</node><node type="predefined" title="RGB" id="9">
						<location x="469" y="466"></location>
						
						<arguments><language name="scala"></language><language name="glsl"></language></arguments>

						<sliders>
							<slider name="r" formula="s" value="62"></slider><slider name="g" formula="s" value="28"></slider><slider name="b" formula="s" value="0"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="matrgb" returntype="Material" outname="m">Material((r*255).toInt &lt;&lt; 16 | (g*255).toInt &lt;&lt; 8 | (b*255).toInt);</function></language><language name="glsl"><function name="matrgb" returntype="vec4" outname="m">return vec4(r, g, b, 0.0);</function></language></functions>
					</node><node type="custom" title="Custom" id="22">
						<location x="552" y="-293"></location>
						<size width="302" height="243"></size>
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="a" datatype="Double"></argument><argument name="b" datatype="Double"></argument><argument name="c" datatype="Double"></argument></language></arguments>

						<sliders>
							<slider name="lin1" formula="s" value="74"></slider><slider name="lin2" formula="s" value="50"></slider><slider name="exp1" formula="pow(256,((s-0.5)*2))" value="29"></slider><slider name="exp2" formula="pow(256,((s-0.5)*2))" value="55"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="custom_f22" returntype="Double" outname="o">min(noise3((v-Vec3(exp2))*exp1),noise3(v*exp1))/exp1-b</function></language></functions>
					</node><node type="predefined" title="3D Perlin Noise" id="6">
						<location x="170" y="427"></location>
						
						<arguments><language name="scala"><argument name="v" datatype="Vec3"></argument><argument name="x" datatype="Double"></argument><argument name="y" datatype="Double"></argument><argument name="z" datatype="Double"></argument><argument name="add" datatype="Double"></argument><argument name="sub" datatype="Double"></argument></language><language name="glsl"><argument name="v" datatype="vec3"></argument><argument name="x" datatype="float"></argument><argument name="y" datatype="float"></argument><argument name="z" datatype="float"></argument><argument name="add" datatype="float"></argument><argument name="sub" datatype="float"></argument></language></arguments>

						<sliders>
							<slider name="size" formula="pow(256,((0.5-s)*2))" value="67"></slider><slider name="scale" formula="pow(256,((s-0.5)*2))" value="41"></slider><slider name="offset" formula="(s-0.5)*2" value="50"></slider>
						</sliders>
		
						<functions><language name="scala"><function name="summedinputnoise3" returntype="Double" outname="o">(noise3((v + Vec3(x,y,z))*size)+offset)*scale/size + add - sub</function></language><language name="glsl"><function name="summedinputnoise3" returntype="float" outname="o">return (noise3((v + vec3(x,y,z))*size)+offset)*scale/size + add - sub;</function></language></functions>
					</node><node type="preview" title="Preview" id="14">
						<location x="870" y="888"></location>
						<size width="362" height="343"></size><image offsety="-75.92305355376662" offsetx="-119.36077031172255" zoom="0.555991731349224"></image><view mode="iso" perspective="sideview_zup"></view><depthslider value="50.0"></depthslider>
						<arguments><language name="scala"><argument name="d" datatype="Double"></argument><argument name="m" datatype="Material"></argument></language><language name="glsl"><argument name="d" datatype="float"></argument><argument name="m" datatype="vec4"></argument></language></arguments>

						<sliders>
							
						</sliders>
		
						<functions><language name="scala"><function name="result" returntype="(Double, Material)" outname="result">(d,m)</function></language><language name="glsl"><function name="result" returntype="vec4" outname="result">return m;</function></language></functions>
					</node></nodes>
			<connections><connection>
						<in nodeid="8" connector="2"></in>
						<out nodeid="10" connector="0"></out>
					</connection><connection>
						<in nodeid="19" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="15" connector="1"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="5"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="8" connector="1"></in>
						<out nodeid="3" connector="0"></out>
					</connection><connection>
						<in nodeid="11" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="20" connector="1"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="13" connector="0"></in>
						<out nodeid="12" connector="0"></out>
					</connection><connection>
						<in nodeid="6" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="13" connector="5"></in>
						<out nodeid="12" connector="3"></out>
					</connection><connection>
						<in nodeid="14" connector="0"></in>
						<out nodeid="13" connector="0"></out>
					</connection><connection>
						<in nodeid="8" connector="0"></in>
						<out nodeid="9" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="1"></in>
						<out nodeid="4" connector="0"></out>
					</connection><connection>
						<in nodeid="22" connector="2"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="4" connector="1"></in>
						<out nodeid="1" connector="1"></out>
					</connection><connection>
						<in nodeid="18" connector="2"></in>
						<out nodeid="8" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="2"></in>
						<out nodeid="6" connector="0"></out>
					</connection><connection>
						<in nodeid="3" connector="3"></in>
						<out nodeid="7" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="0"></in>
						<out nodeid="15" connector="0"></out>
					</connection><connection>
						<in nodeid="15" connector="0"></in>
						<out nodeid="11" connector="0"></out>
					</connection><connection>
						<in nodeid="18" connector="0"></in>
						<out nodeid="17" connector="0"></out>
					</connection><connection>
						<in nodeid="2" connector="1"></in>
						<out nodeid="18" connector="0"></out>
					</connection><connection>
						<in nodeid="22" connector="0"></in>
						<out nodeid="1" connector="0"></out>
					</connection><connection>
						<in nodeid="20" connector="0"></in>
						<out nodeid="22" connector="0"></out>
					</connection><connection>
						<in nodeid="18" connector="1"></in>
						<out nodeid="19" connector="0"></out>
					</connection><connection>
						<in nodeid="7" connector="0"></in>
						<out nodeid="1" connector="3"></out>
					</connection><connection>
						<in nodeid="4" connector="2"></in>
						<out nodeid="1" connector="2"></out>
					</connection></connections>
		</document>